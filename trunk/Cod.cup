package jflex_plft5;

import java.io.*;
import java_cup.runtime.*; 

parser code
{:
	
	
	public static void main(String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
		new CodCup(new CodLex(System.in)).parse();
	}
	public void syntax_error(Symbol s){
		report_error("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
	}
:}

terminal String ANY, PROGRAM, BEGIN, THEN, ELSE, END, DOWNTO, IN, PACKED, TO, ARRAY, VAR, INLINE,
				PROCEDURE, TYPE, ASM, INTERFACE, UNIT, FILE, LABEL, RECORD, UNTIL, CASE, FOR, MOD,
				REPEAT, IF, CONST, FOWARD, NIL, SET, USES, AND, CONSTRUCTOR, FUNCTION, NOT, SHL, DESTRUCTOR,
				GOTO, OBJECT, SHR, WHILE, DIV, OF, STRING, WITH, DO, IMPLEMENTATION, OR, XOR, WRITE, READ, INTEGER,
				REAL, FLOAT, DOUBLE, BOOLEAN, TRUE, FALSE, CHAR, ABRECONCHETE, FECHACONCHETE, MENOR_QUE, MENORIGUAL,
				MAIORIGUAL, MAIOR_QUE, DP, PV, IGUAL, VG, AP, FP, ACHAVE, FCHAVE, ATRIBUICAO, PO, MULT, DIVR, SOMA, SUB, 
				PONTO, DIFERENTE, IDENTIFICADOR, NUMERO_INTEIRO, NUMERO_REAL;


non terminal lista, sentenca, expressao;

lista ::= lista sentenca
       | sentenca
       ;
 sentenca ::= PROGRAM  BEGIN {: System.out.println("Sentencia analizada correctamente. Sin errores."); :}
			| error {: System.out.println("Error sintactico en la sentencia"); :}
			;      

